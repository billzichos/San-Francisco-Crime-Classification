#
# Returns:
#   Data frame containing keyword information for a specific number of days in the past.
today <- as.POSIXct(as.character(Sys.Date()))
GetNumKeywordsByDate(dataset,
seq.POSIXt(from = today - ((n - 1) * 86400),
to = today,
by = "days"))
}
consumerKey <- " 5CMLaLXybPuWxFAZjkF4F2kAa"
consumerSecret <- " CRlXBGEsyGMIRoQXgV57W8CloYZnyTTHt0bWuammW31t7vE7N2"
accessToken <- " 287380276-5YbMFS2TzKaierpQsbrHehy25bbjMpsGvaNyxgJy"
accessTokenSecret <- " NlYIlEKMKTeT7Qa1f33T31TIEwqo6xXDFmE6PUiJPIPpr"
handle <- "billzichos"
setup_twitter_oauth(consumerKey, consumerSecret, accessToken, accessTokenSecret)
tweets <- GetTweets(handle, 100)
volumes <- ExtractVolumes(tweets)
GetVolumeSumByDays(volumes, 4)
round(GetVolumeMilkTypeSumByDays(volumes, 4, "breast") / GetVolumeSumByDays(volumes, 4) * 100)
pumps <- ExtractKeyword(tweets, "pump")
GetNumKeywordsByDays(pumps, 4)
poops <- ExtractKeyword(tweets, "poop")
GetNumKeywordsByDays(poops, 4)
pees <- ExtractKeyword(tweets, "pee")
GetNumKeywordsByDays(pees, 4)
# uncomment the lines below to install packages
#install.packages("twitteR")
#install.packages("stringr")
#install.packages("dplyr")
library("twitteR")
library("stringr")
library("dplyr")
kIgnoreTweet <- "update:|nobot:"
GetTweets <- function(handle, n = 1000) {
# Retrieve tweets.
#
# Args:
#   handle: Twitter handle.
#   n: Number of tweets to retrieve (default: 1000).
#
# Returns:
#   Tweet data frame with text.orig and created.orig columns.
timeline <- userTimeline(handle, n = n)
tweets <- sapply(timeline, function(x) {
c(x$getText(), x$getCreated())
})
tweets <- data.frame(t(tweets))
names(tweets) <- c("text.orig", "created.orig")
tweets$text <- tolower(tweets$text.orig)
tweets$created <- as.POSIXct(as.numeric(as.vector(tweets$created.orig)), origin="1970-01-01")
arrange(tweets, created)
}
ExtractVolumes <- function(tweets) {
# Extract volumes from tweet data frame.
#
# Args:
#   tweets: Tweet data frame.
#
# Returns:
#   Data frame containing volume information.
volumes <- tweets[grepl("\\d+ ?ml", tweets$text) & !grepl(kIgnoreTweet, tweets$text), ]
volumes$volume <- as.numeric(str_match(volumes$text, "(\\d+) ?ml")[, 2])
volumes$milktype <- rep("formula", nrow(volumes))
volumes$milktype[grep("bm|breast", volumes$text)] <- "breast"
volumes
}
GetVolumeSumByDate <- function(volumes, dt) {
# Extract volume info for a specific date or date range.
#
# Args:
#   volumes: Volume data frame.
#   dt: Date or date range to extract details for.
#
# Returns:
#   Data frame containing volume information for a specific date or date range.
result <- sapply(dt, function(x) {
lower <- volumes$created - x >= 0
upper <- volumes$created - (x + 86400) < 0
sum(volumes[lower & upper, "volume"])
})
names(result) <- dt
result
}
GetVolumeSumByDays <- function(volumes, n = 1) {
# Extract volume info for a specific number of days in the past.
#
# Args:
#   volumes: Volume data frame.
#   n: Number of days (default: 1).
#
# Returns:
#   Data frame containing volume information for a specific number of days in the past.
today <- as.POSIXct(as.character(Sys.Date()))
GetVolumeSumByDate(volumes,
seq.POSIXt(from = today - ((n - 1) * 86400),
to = today,
by = "days"))
}
GetVolumeMilkTypeSumByDate <- function(volumes, dt, milktype) {
# Extract milk type info for a specific date or date range.
#
# Args:
#   volumes: Volume data frame.
#   dt: Date or date range to extract details for.
#
# Returns:
#   Data frame containing milk type information for a specific date or date range.
result <- sapply(dt, function(x) {
lower <- volumes$created - x >= 0
upper <- volumes$created - (x + 86400) < 0
sum(volumes[lower & upper & volumes$milktype == milktype, "volume"])
})
names(result) <- dt
result
}
GetVolumeMilkTypeSumByDays <- function(volumes, n = 1, milktype) {
# Extract milk type info for a specific number of days in the past.
#
# Args:
#   volumes: Volume data frame.
#   n: Number of days (default: 1).
#
# Returns:
#   Data frame containing milk type information for a specific number of days in the past.
today <- as.POSIXct(as.character(Sys.Date()))
GetVolumeMilkTypeSumByDate(volumes,
seq.POSIXt(from = today - ((n - 1) * 86400),
to = today,
by = "days"),
milktype)
}
ExtractKeyword <- function(tweets, keyword) {
# Extract data with keyword from tweet data frame.
#
# Args:
#   tweets: Tweet data frame.
#   keyword: Keyword to search for.
#
# Returns:
#   Data frame of tweets containing keyword.
tweets[grepl(keyword, tweets$text) & !grepl(kIgnoreTweet, tweets$text), ]
}
GetNumKeywordsByDate <- function(dataset, dt) {
# Extract number of keywords for a specific date or date range.
#
# Args:
#   dataset: Keyword data frame.
#   dt: Date or date range to extract details for.
#
# Returns:
#   Data frame containing keyword for a specific date or date range.
result <- sapply(dt, function(x) {
lower <- dataset$created - x >= 0
upper <- dataset$created - (x + 86400) < 0
nrow(dataset[lower & upper, ])
})
names(result) <- dt
result
}
GetNumKeywordsByDays <- function(dataset, n = 1) {
# Extract keyword info for a specific number of days in the past.
#
# Args:
#   volumes: Keyword data frame.
#   n: Number of days (default: 1).
#
# Returns:
#   Data frame containing keyword information for a specific number of days in the past.
today <- as.POSIXct(as.character(Sys.Date()))
GetNumKeywordsByDate(dataset,
seq.POSIXt(from = today - ((n - 1) * 86400),
to = today,
by = "days"))
}
consumerKey <- "5CMLaLXybPuWxFAZjkF4F2kAa"
consumerSecret <- "CRlXBGEsyGMIRoQXgV57W8CloYZnyTTHt0bWuammW31t7vE7N2"
accessToken <- "287380276-5YbMFS2TzKaierpQsbrHehy25bbjMpsGvaNyxgJy"
accessTokenSecret <- "NlYIlEKMKTeT7Qa1f33T31TIEwqo6xXDFmE6PUiJPIPpr"
handle <- "billzichos"
setup_twitter_oauth(consumerKey, consumerSecret, accessToken, accessTokenSecret)
tweets <- GetTweets(handle, 100)
volumes <- ExtractVolumes(tweets)
GetVolumeSumByDays(volumes, 4)
round(GetVolumeMilkTypeSumByDays(volumes, 4, "breast") / GetVolumeSumByDays(volumes, 4) * 100)
pumps <- ExtractKeyword(tweets, "pump")
GetNumKeywordsByDays(pumps, 4)
poops <- ExtractKeyword(tweets, "poop")
GetNumKeywordsByDays(poops, 4)
pees <- ExtractKeyword(tweets, "pee")
GetNumKeywordsByDays(pees, 4)
tweets
bge.list <- searchTwitter('@MyBGE', n=1000, cainfo="cacert.pem")
bge.list <- searchTwitter('@MyBGE', n=1000)
bge.list
getwd()
file("test.ics")
f <- file("test.ics")
writeLines("line1",f)
close f
close(f)
f <- file("test.ics")
writeLines("line 2 hello world", f)
close(f)
writeLines(c('line 1','line 2 hello world'), f)
f <- file("test.ics")
writeLines(c('line 1','line 2 hello world'), f)
close(f)
subject <- 'test subject'
line1 <- 'BEGIN:VCALENDAR'
line2 <- 'VERSION:2.0'
line3 <- 'BEGIN:VEVENT'
line4 <- paste('SUMMARY:', subject, sep='')
line5 <- 'END:VEVENT'
line6 <- 'END:VCALENDAR'
f <- file("test.ics")
writeLines(c(line1, line2, line3, line4, line5, line6), f)
close(f)
line01 <- 'BEGIN:VCALENDAR'
line02 <- 'VERSION:2.0'
line03 <- 'PRODID:'
line04 <- 'BEGIN:VEVENT'
line05 <- 'UID:'
line06 <- 'DTSTAMP:20150530T170000Z'
line07 <- 'ORGANIZER;CN=Bill Zichos:MAILTO:billzichos@hotmail.com'
line08 <- 'DTSTART:20150530T170000Z'
line09 <- 'DTEND:20150530T180000Z'
line10 <- 'SUMMARY:[enter subject here]'
line11 <- 'DESCRIPTION:[enter description here]'
line12 <- 'END:VEVENT'
line13 <- 'END:VCALENDAR'
f <- file("test.ics")
writeLines(
c(line01, line02, line03, line04, line05, line06, line07, line08, line09, line10, line11, line12, line13),
f)
close(f)
line01 <- 'BEGIN:VCALENDAR'
line02 <- 'VERSION:2.0'
line03 <- 'PRODID:'
line04 <- 'BEGIN:VEVENT'
line05 <- 'UID:bill.zichos'
line06 <- 'DTSTAMP:20150530T170000Z'
line07 <- 'ORGANIZER;CN=Bill Zichos:MAILTO:billzichos@hotmail.com'
line08 <- 'DTSTART:20150530T170000Z'
line09 <- 'DTEND:20150530T180000Z'
line10 <- 'SUMMARY:[enter subject here]'
line11 <- 'DESCRIPTION:[enter description here]'
line12 <- 'END:VEVENT'
line13 <- 'END:VCALENDAR'
f <- file("test.ics")
writeLines(
c(line01, line02, line03, line04, line05, line06, line07, line08, line09, line10, line11, line12, line13),
f)
close(f)
line03 <- 'PRODID:R'
line01 <- 'BEGIN:VCALENDAR'
line02 <- 'VERSION:2.0'
line03 <- 'PRODID:R'
line04 <- 'BEGIN:VEVENT'
line05 <- 'UID:bill.zichos'
line06 <- 'DTSTAMP:20150530T170000Z'
line07 <- 'ORGANIZER;CN=Bill Zichos:MAILTO:billzichos@hotmail.com'
line08 <- 'DTSTART:20150530T170000Z'
line09 <- 'DTEND:20150530T180000Z'
line10 <- 'SUMMARY:[enter subject here]'
line11 <- 'DESCRIPTION:[enter description here]'
line12 <- 'END:VEVENT'
line13 <- 'END:VCALENDAR'
f <- file("test.ics")
writeLines(
c(line01, line02, line03, line04, line05, line06, line07, line08, line09, line10, line11, line12, line13),
f)
close(f)
f <- file("test.ics")
writeLines(c(line01 <- 'BEGIN:VCALENDAR'
line02 <- 'VERSION:2.0'
line03 <- 'PRODID:R'
line04 <- 'BEGIN:VEVENT'
line05 <- 'UID:bill.zichos'
line06 <- 'DTSTAMP:20150530T170000Z'
line07 <- 'ORGANIZER;CN=Bill Zichos:MAILTO:billzichos@hotmail.com'
line08 <- 'DTSTART:20150530T170000Z'
line09 <- 'DTEND:20150530T180000Z'
line10 <- paste('SUMMARY:', subject, sep='')
line11 <- paste('DESCRIPTION:', description, sep='')
line12 <- 'END:VEVENT'
line13 <- 'END:VCALENDAR'
), f)
close(f)
description <- '[enter description here]'
f <- file("test.ics")
writeLines(c(line01 <- 'BEGIN:VCALENDAR'
line02 <- 'VERSION:2.0'
line03 <- 'PRODID:R'
line04 <- 'BEGIN:VEVENT'
line05 <- 'UID:bill.zichos'
line06 <- 'DTSTAMP:20150530T170000Z'
line07 <- 'ORGANIZER;CN=Bill Zichos:MAILTO:billzichos@hotmail.com'
line08 <- 'DTSTART:20150530T170000Z'
line09 <- 'DTEND:20150530T180000Z'
line10 <- paste('SUMMARY:', subject, sep='')
line11 <- paste('DESCRIPTION:', description, sep='')
line12 <- 'END:VEVENT'
line13 <- 'END:VCALENDAR'
), f)
close(f)
f <- file("test.ics")
writeLines(c(line01 <- 'BEGIN:VCALENDAR',
line02 <- 'VERSION:2.0',
line03 <- 'PRODID:R',
line04 <- 'BEGIN:VEVENT',
line05 <- 'UID:bill.zichos',
line06 <- 'DTSTAMP:20150530T170000Z',
line07 <- 'ORGANIZER;CN=Bill Zichos:MAILTO:billzichos@hotmail.com',
line08 <- 'DTSTART:20150530T170000Z',
line09 <- 'DTEND:20150530T180000Z',
line10 <- paste('SUMMARY:', subject, sep=''),
line11 <- paste('DESCRIPTION:', description, sep=''),
line12 <- 'END:VEVENT',
line13 <- 'END:VCALENDAR'
), f)
close(f)
f <- file("test.ics")
writeLines(c(line01 <- 'BEGIN:VCALENDAR',
line02 <- 'VERSION:2.0',
line03 <- 'PRODID:R',
line04 <- 'BEGIN:VEVENT',
line05 <- 'UID:bill.zichos',
line06 <- 'DTSTAMP:20150530T000000',
line07 <- 'ORGANIZER;CN=Bill Zichos:MAILTO:billzichos@hotmail.com',
line08 <- 'DTSTART:20150530T000000',
line09 <- 'DTEND:20150531T000000',
line10 <- paste('SUMMARY:', subject, sep=''),
line11 <- paste('DESCRIPTION:', description, sep=''),
line12 <- 'END:VEVENT',
line13 <- 'END:VCALENDAR'
), f)
close(f)
today()
system.time()
date()
month(date())
#Week 2 Quiz
library("httr")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
myapp <- oauth_app("github",
key = "b278d64147503fcd381b",
secret = "b98c9972b60884be3cf4c187bd24dc6cc783b315")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library("ggplot2")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + geom_smooth(methods("lm"))
wd <- "~/GitHub/San-Francisco-Crime-Classification"
setwd(wd)
# The following files are provided
#   - test.csv.zip
#   - train.csv.zip
#   - sampleSubmission.csv.zip
source("~/GitHub/Get-Raw-Data/download.R")
downloadSingleKaggleZip("sf-crime","train.csv.zip", "train.csv")
downloadSingleKaggleZip("sf-crime","test.csv.zip", "test.csv")
downloadSingleKaggleZip("sf-crime","sampleSubmission.csv.zip", "sampleSubmission.csv")
setwd("~/GitHub/San-Francisco-Crime-Classification")
# read in the training file and prepare for combining with test.
train <- read.csv("train.csv")
train$Source <- "Train"
train$Id <- 0
# read in the test file and prepare for combining with train.
test <- read.csv("test.csv")
test$Source <- "Test"
test$Category <- ""
test$Descript <- ""
test$Resolution <- ""
# combine the data files for feature generation
library("dplyr")
train <- select(train, Id, Dates, Category, Descript, DayOfWeek, PdDistrict, Resolution, Address, X, Y, Source)
test <- select(test, Id, Dates, Category, Descript, DayOfWeek, PdDistrict, Resolution, Address, X, Y, Source)
df <- rbind(train, test)
# add variables that are needed for submission
sub <- read.csv("sampleSubmission.csv")
cols <- names(sub)[2:length(names(sub))]
cols <- gsub("\\.", " ", cols)
cols[8] <- "DRUG/NARCOTIC"
cols[13] <- "FORGERY/COUNTERFEITING"
cols[17] <- "LARCENY/THEFT"
cols[21] <- "NON-CRIMINAL"
cols[23] <- "PORNOGRAPHY/OBSCENE MAT"
df[,c(cols)] <- 0
for (i in cols) {df[df$Category==i,i] <- 1}
# derive some date/time-related variables
library("lubridate")
df$Dates.Hour <- hour(df$Dates)
df$Dates.Quarter <- quarter(df$Dates)
df$Dates.Month <- month(df$Dates)
df$Dates.Wkdy <- wday(df$Dates)
df$Dates.LogNumeric <- log10(as.numeric(as.POSIXct(df$Dates)))
# derive some PD District-related variables
df$PdDistrict.NORTHERN.flag <- 0
df$PdDistrict.PARK.flag <- 0
df$PdDistrict.INGLESIDE.flag <- 0
df$PdDistrict.BAYVIEW.flag <- 0
df$PdDistrict.RICHMOND.flag <- 0
df$PdDistrict.CENTRAL.flag <- 0
df$PdDistrict.TARAVAL.flag <- 0
df$PdDistrict.TENDERLOIN.flag <- 0
df$PdDistrict.MISSION.flag <- 0
df$PdDistrict.SOUTHERN.flag <- 0
df[which(df$PdDistrict=="NORTHERN"),which(names(df)=="PdDistrict.NORTHERN.flag")] <- 1
df[which(df$PdDistrict=="PARK"),which(names(df)=="PdDistrict.PARK.flag")] <- 1
df[which(df$PdDistrict=="INGLESIDE"),which(names(df)=="PdDistrict.INGLESIDE.flag")] <- 1
df[which(df$PdDistrict=="BAYVIEW"),which(names(df)=="PdDistrict.BAYVIEW.flag")] <- 1
df[which(df$PdDistrict=="RICHMOND"),which(names(df)=="PdDistrict.RICHMOND.flag")] <- 1
df[which(df$PdDistrict=="CENTRAL"),which(names(df)=="PdDistrict.CENTRAL.flag")] <- 1
df[which(df$PdDistrict=="TARAVAL"),which(names(df)=="PdDistrict.TARAVAL.flag")] <- 1
df[which(df$PdDistrict=="TENDERLOIN"),which(names(df)=="PdDistrict.TENDERLOIN.flag")] <- 1
df[which(df$PdDistrict=="MISSION"),which(names(df)=="PdDistrict.MISSION.flag")] <- 1
df[which(df$PdDistrict=="SOUTHERN"),which(names(df)=="PdDistrict.SOUTHERN.flag")] <- 1
help(lm)
fit <- lm(ARSON ~ Dates.Hour, df)
fit
summary(fit)
fit <- lm(PROSTITUTION ~ Dates.Hour + Dates.Month + PdDistrict, df)
summary(fit)
fit <- lm(PROSTITUTION ~ Dates.Hour + Dates.Month + PdDistrict.CENTRAL, df)
fit <- lm(PROSTITUTION ~ Dates.Hour + Dates.Month + PdDistrict.CENTRAL.flag, df)
summary(fit)
fit <- lm(PROSTITUTION ~ Dates.Hour + Dates.Month + DAYOFWEEK, df)
fit <- lm(PROSTITUTION ~ Dates.Hour + Dates.Month + DayOfWeek, df)
fit <- lm(PROSTITUTION ~ Dates.Hour + Dates.Month + DayOfWeek, df[df$Source=="Train"])
fit <- lm(PROSTITUTION ~ Dates.Hour + Dates.Month + DayOfWeek, df[df$Source=="Train",])
summary(fit)
names(df$PdDistrict)
unique(df$PdDistrict)
pdCols <- unique(df$PdDistrict)
pdCols <- paste("PdDistrict.", pdCols, ".flag")
pdCols <- unique(df$PdDistrict)
pdCols <- paste("PdDistrict.", pdCols, ".flag", sep = "")
setwd("~/GitHub/San-Francisco-Crime-Classification")
# read in the training file and prepare for combining with test.
train <- read.csv("train.csv")
train$Source <- "Train"
train$Id <- 0
# read in the test file and prepare for combining with train.
test <- read.csv("test.csv")
test$Source <- "Test"
test$Category <- ""
test$Descript <- ""
test$Resolution <- ""
# combine the data files for feature generation
library("dplyr")
train <- select(train, Id, Dates, Category, Descript, DayOfWeek, PdDistrict, Resolution, Address, X, Y, Source)
test <- select(test, Id, Dates, Category, Descript, DayOfWeek, PdDistrict, Resolution, Address, X, Y, Source)
df <- rbind(train, test)
# add variables that are needed for submission
sub <- read.csv("sampleSubmission.csv")
cols <- names(sub)[2:length(names(sub))]
cols <- gsub("\\.", " ", cols)
cols[8] <- "DRUG/NARCOTIC"
cols[13] <- "FORGERY/COUNTERFEITING"
cols[17] <- "LARCENY/THEFT"
cols[21] <- "NON-CRIMINAL"
cols[23] <- "PORNOGRAPHY/OBSCENE MAT"
df[,c(cols)] <- 0
for (i in cols) {df[df$Category==i,i] <- 1}
# derive some date/time-related variables
library("lubridate")
df$Dates.Hour <- hour(df$Dates)
df$Dates.Quarter <- quarter(df$Dates)
df$Dates.Month <- month(df$Dates)
df$Dates.Wkdy <- wday(df$Dates)
df$Dates.LogNumeric <- log10(as.numeric(as.POSIXct(df$Dates)))
# derive some PD District-related variables
pdCols <- unique(df$PdDistrict)
pdCols <- paste("PdDistrict.", pdCols, ".flag", sep = "")
df[,c(pdCols)] <- 0
for (i in pdCols) {df[df$PdDistrict in i,i] <- 1}
for (i in pdCols) {df[df$PdDistrict %in% i,i] <- 1}
summary(df[,c(55:65)])
MISSION %in% "PdDistrict.MISSION.flag"
MISSION %%in%% "PdDistrict.MISSION.flag"
"MISSION" %in% "PdDistrict.MISSION.flag"
help(grep)
gsub(".flag", "", "PdDistrict.MISSION.flag")
gsub(".flag"|"PdDistrict.", "", "PdDistrict.MISSION.flag")
gsub(".flag|PdDistrict.", "", "PdDistrict.MISSION.flag")
df[,c(pdCols)] <- 0
for (i in pdCols) {df[df$PdDistrict==gsub(".flag|PdDistrict.", "", i),i] <- 1}
summary(df[,c(55:65)])
rex <- "1500 Block of OAK ST"
grep("[0:9]{1,9} Block of", rex)
rex <- "a1500 Block of OAK ST"
grep("[0:9]{1,9} Block of", rex)
